# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Yuye.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import threading
import winsound
from enum import Enum

from PyQt5 import QtCore, QtGui
from PyQt5.QtCore import QUrl, QObject
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent
from PyQt5.QtWidgets import *
import get_music as gm
import local_file_search as fs
from lrc import Lrc, Ui_pop
from get_music import re, random


class Y(Enum):
    SELF = 0,
    LOCAL = 1,
    GD = 2

    # SS = 3

    def __init__(self, *args):
        pass


colume_name_list = {
    '搜索': ['下载', '添加至歌单'],
    '本地': ['删除'],
    '播放': ['下载', '添加至歌单', '删除'],
    '选择': ['下载', '添加至歌单', '删除'],
    '歌单': ['下载', '移动', '删除']
}

FC = gm.st.conf.get('base', 'font_color')


def setPix(this: QWidget, url, isauto=False):
    pal = QtGui.QPalette()
    if isauto:
        pal.setBrush(QtGui.QPalette().Window, QtGui.QBrush(QtGui.QPixmap(url).scaled(this.size())))
    else:
        pal.setBrush(QtGui.QPalette().Window, QtGui.QBrush(QtGui.QPixmap(url)))
    this.setPalette(pal)


class Ui_mesbox(QWidget):
    def __init__(self, text):
        super().__init__(None)
        self.setWindowFlag(QtCore.Qt.FramelessWindowHint)
        self.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
        self.isal = False
        self.lable = QLabel()
        self.h = QHBoxLayout()
        self.setLayout(self.h)
        self.h.addWidget(self.lable)
        self.lable.setText(text)
        self.setMouseTracking(True)
        self.ispressed = False
        self.lable.setStyleSheet(
            'QLabel{color:rgba(255, 255, 255, 255);font-size:25px;color:%s;font-bold:true}' % FC)
        self.t = None
        p = QtGui.QPalette()
        p.setBrush(self.backgroundRole(), QtGui.QBrush(QtGui.QPixmap("resource/pix.png")))
        self.setPalette(p)

        self.show()

        self.move((QDesktopWidget().screenGeometry().width() - self.width()) / 2,
                  (QDesktopWidget().screenGeometry().height() - self.height()) / 2)
        winsound.PlaySound("resource/Windows Background.wav", 1)
        self.settmd()

    def settmd(self):
        if not self.ispressed:
            op = self.windowOpacity()
            if op == 0.0:
                self.close()
                self.destroy()
                return
            self.setWindowOpacity(op - 0.25)
        if self.t is not None:
            self.t.cancel()
        self.t = threading.Timer(0.7, self.settmd)
        self.t.setDaemon(True)
        self.t.start()

    def mousePressEvent(self, event: QtGui.QMouseEvent):
        self.ispressed = True

    def mouseReleaseEvent(self, event: QtGui.QMouseEvent):
        self.ispressed = False


class Ui_List(QWidget):
    sendselect = QtCore.pyqtSignal(list)

    def __init__(self, file_list: list):
        super().__init__(None)
        self.setWindowTitle('本地搜索')
        self.vv = QVBoxLayout(self)
        self.v = QVBoxLayout(self)
        self.w = QWidget()
        self.v.addWidget(self.w)
        self.w.setLayout(self.vv)
        self.setLayout(self.v)
        self.list = file_list
        self.sc = QScrollArea()
        self.v.addWidget(self.sc)
        self.setMinimumWidth(100)
        self.setMaximumWidth(350)
        self.move((QDesktopWidget().screenGeometry().width() - self.width()) / 2,
                  (QDesktopWidget().screenGeometry().height() - self.height()) / 2)
        self.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
        for x in file_list:
            c = QCheckBox()
            if type(x) is str:
                name = fs.os.path.split(x)[1]
                c.setToolTip(x)
            elif type(x) is list:
                name = '歌单名:%s 含%s首' % (x[0], x[2])
                c.setToolTip('是否收藏:' + str(x[3]))
            else:
                name = ''
            c.setText(name)
            c.setChecked(True)
            self.vv.addWidget(c)
        self.sc.setWidget(self.w)
        self.sc.setWidgetResizable(True)
        self.all = QPushButton('全选')
        self.notall = QPushButton('全不选')
        self.sure = QPushButton('确定')
        self.v.addWidget(self.all)
        self.v.addWidget(self.notall)
        self.v.addWidget(self.sure)
        self.all.clicked.connect(self.allf)
        self.notall.clicked.connect(self.notallf)
        self.sure.clicked.connect(self.suref)
        self.show()

    def allf(self):
        l = self.w.children()
        for x in l:
            if type(x) is QCheckBox:
                x.setChecked(True)

    def notallf(self):
        l = self.w.children()
        for x in l:
            if type(x) is QCheckBox:
                x.setChecked(False)

    def suref(self):
        i = 0
        l = self.w.children()
        ll = self.list.copy()
        self.list.clear()
        for x in l:
            if type(x) is QCheckBox:
                if x.isChecked():
                    self.list.append(ll[i])
                i += 1
        self.sendselect.emit(self.list)
        self.close()
        self.sendselect.disconnect()


class TableItem(QTableWidgetItem):
    def __init__(self, text):
        super().__init__()
        self.setToolTip(text)
        if text == '播放':
            self.setIcon(QtGui.QIcon("resource/play1.png"))
        else:
            if text == '下载':
                self.setIcon(QtGui.QIcon("resource/down1.png"))
            else:
                if text == '删除':
                    self.setIcon(QtGui.QIcon("resource/delete1.png"))
                else:
                    if text == '移动':
                        self.setIcon(QtGui.QIcon("resource/move1.png"))
                    else:
                        if text == '添加至歌单':
                            self.setIcon(QtGui.QIcon("resource/add1.png"))
                        else:
                            self.setText(text)


class Label(QLabel):
    def __init__(self, parent=None, *args):
        super().__init__(parent, *args)
        self.fsize = 20
        self.setStyleSheet('color:%s;font-family:楷体;font-size:%dpx;font-weight:600;width:120px}' % (FC, self.fsize))

    def settext(self, a0: str) -> None:
        _translate = QtCore.QCoreApplication.translate
        self.setText(_translate("Widget", "<html><head/><body><p align=\"left\"><span style=\"  "
                                          "\">%s</span></p></body></html>" % a0))


class Inputbox(QWidget):
    sendname = QtCore.pyqtSignal(str)

    def __init__(self, title, mes='歌单名'):
        super().__init__(None)
        self.setWindowFlag(QtCore.Qt.WindowStaysOnTopHint)
        self.setWindowTitle(title)
        self.v = QVBoxLayout(self)
        self.input = QLineEdit()
        self.input.setMaxLength(1000000000)
        self.label = QLabel()
        self.btn = ToolBttun(self)
        self.btn.setText('确定')
        self.v.addWidget(self.label)
        self.v.addWidget(self.input)
        self.h = QHBoxLayout(self)
        self.h.addWidget(self.btn)
        self.v.addLayout(self.h)
        self.setLayout(self.v)
        self.btn.clicked.connect(self.sure)
        self.input.returnPressed.connect(self.sure)
        _translate = QtCore.QCoreApplication.translate
        self.label.setText(_translate("Widget",
                                      "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; "
                                      "font-weight:600; font-family:\"楷体\"; "
                                      "color:white!important;\">请输入%s:</span></p></body></html>") % mes)
        self.show()
        self.move((QDesktopWidget().screenGeometry().width() - self.width()) / 2,
                  (QDesktopWidget().screenGeometry().height() - self.height()) / 2)

    def sure(self):
        self.sendname.emit(self.input.text())
        self.close()

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        self.sendname.disconnect()


class ProgressBar(QProgressBar):
    userset_value = QtCore.pyqtSignal(float, int)

    def __init__(self, *__args):
        super().__init__(*__args)
        self.setMouseTracking(True)

    def mouseReleaseEvent(self, e: QtGui.QMouseEvent):
        self.userset_value.emit(e.x() / self.width(), 1)

    def mouseMoveEvent(self, e: QtGui.QMouseEvent):
        self.userset_value.emit(e.x() / self.width(), -1)


class Slider(QSlider):
    def __init__(self, parent, type):
        super().__init__(parent)
        if type > 0:
            self.setStyleSheet(
                "QSlider{border-color: #cbcbcb; } QSlider::groove:vertical { background: #cbcbcb; width: "
                "6px; border-radius: 1px; padding-left:-1px; padding-right:-1px; padding-top:-1px; "
                "padding-bottom:-1px; } QSlider::sub-page:vertical { background: #cbcbcb; border-radius: "
                "2px; } QSlider::add-page:vertical { background: qlineargradient(x1:0, y1:0, x2:0, y2:1, "
                "stop:0 #439cf4, stop:1 #439cf4); background: qlineargradient(x1: 0, y1: 0.2, x2: 1, "
                "y2: 1, stop: 0 #439cf4, stop: 1 #439cf4); width: 10px; border-radius: 2px; } "
                "QSlider::handle:vertical { border-image: url(resource/vo.png); margin: -2px -7px -2px "
                "-7px; height: 17px; }")
        else:
            self.setStyleSheet(
                "QSlider{border-color: #cbcbcb; }QSlider::groove:horizontal {border: 1px solid #4A708B; background: #C0C0C0; height: "
                "5px; border-radius: 1px; padding-left:-1px; padding-right:-1px; } "
                "QSlider::sub-page:horizontal {background: qlineargradient(x1:0, y1:0, x2:0, y2:1, "
                "stop:0 #B1B1B1, stop:1 #c4c4c4); background: qlineargradient(x1: 0, y1: 0.2, x2: 1, "
                "y2: 1, stop: 0 #5DCCFF, stop: 1 #1874CD); border: 1px solid #4A708B; height: 10px; "
                "border-radius: 2px; } QSlider::add-page:horizontal {background: #575757; border: 0px "
                "solid #777; height: 10px; border-radius: 2px; } QSlider::handle:horizontal {"
                "background: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, "
                "stop:0.6 #45ADED, stop:0.778409 rgba(255, 255, 255, 255)); width: 11px; margin-top: "
                "-3px; margin-bottom: -3px; border-radius: 5px; } QSlider::handle:horizontal:hover {"
                "background: qradialgradient(spread:pad, cx:0.5, cy:0.5, radius:0.5, fx:0.5, fy:0.5, "
                "stop:0.6 #2A8BDA, stop:0.778409 rgba(255, 255, 255, 255)); width: 11px; margin-top: "
                "-3px; margin-bottom: -3px; border-radius: 5px; }")
        self.valueChanged.connect(lambda x: self.setToolTip(str(x)))


class ToolBttun(QToolButton):
    def __init__(self, parent,  width=80, height=32, fs=12):
        super().__init__(parent)
        self.setStyleSheet("QToolButton"
                           "{border:none;color:%s;background-color:rgba(120,127,131,0);"
                           "border-radius:5px;padding:2px 4px;/*border-radius控制圆角大小*/  }"
                           "QToolButton{  width:%d px;  height:%d px;  }"
                           "QToolButton:hover{  /*鼠标放上后*/  color:rgb(255, 255, 255);  border-style:solid;  border-top-left-radius:2px;  border-top-right-radius:2px;  background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop:0 rgb(226,236,241),   stop: 0.3 rgb(160,160,160),  stop: 1 rgb(120,120,120));  border:1px;  border-radius:5px;padding:2px 4px;  }"
                           "QToolButton:pressed{ /*按下按钮后*/  "
                           "color:rgb(255, 255, 255);    border-style:solid;  border-top-left-radius:2px;  border-top-right-radius:2px;  "
                           "background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop:0 rgb(226,236,241),   "
                           "stop: 0.3 rgb(190,190,190), "
                           "stop: 1 rgb(160,160,160));  "
                           "border:1px;  border-radius:5px;padding:2px 4px;  }  "
                           "QToolButton:checked{    /*选中后*/  "
                           "color:rgb(255, 255, 255);    border-style:solid;  border-top-left-radius:2px;  border-top-right-radius:2px;  "
                           "background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop:0 rgb(226,236,241),   "
                           "stop: 0.3 rgb(190,190,190),  "
                           "stop: 1 rgb(160,160,160));  "
                           "border:1px;  border-radius:5px;padding:2px 4px;  }  " % (FC, width, height))
        self.setFont(QtGui.QFont('楷体', fs, 75))


class TableWidget(QTableWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setShowGrid(False)
        self.horizontalHeader().hide()  # 取消列号
        self.verticalHeader().hide()  # 取消行号
        self.setEditTriggers(QAbstractItemView.NoEditTriggers)  # 只读
        self.setStyleSheet("QTableWidget::Item:hover{background-color:rgb(74, 136, 199) "
                           "}QTableWidget::Item:selected{font:bold}QTableWidget::Item{"
                           "border:0px solid rgb(175, 177, 179);border-bottom:1px solid rgb(175, 177, "
                           "179);}QTableWidget{outline:0px;border-image:url(resource/bg.png);color:%s}QScrollBar{"
                           "background-color:white; height:10px; }QScrollBar::handle{background:lightgray; border:2px "
                           "solid transparent; border-radius:5px; }QScrollBar::handle:hover{background:gray; "
                           "}QScrollBar::sub-line{background:transparent;}QScrollBar::add-line{"
                           "background:transparent;}" % FC)


class ListWidget(QListWidget):
    def __init__(self, *args):
        super().__init__(*args)
        self.setMinimumWidth(100)
        self.setMaximumWidth(150)
        self.setStyleSheet("QListWidget{border-image:url(resource/bg.png);color:%s;font-size:16px}" % FC)
        self.popMenu = QMenu(self)
        self.popMenu.addAction(QAction("重命名", self))
        self.popMenu.addAction(QAction("清空", self))
        self.popMenu.addAction(QAction("删除", self))
        self.popMenu.addAction(QAction("导入歌单", self))

    def addItems(self, Iterable, p_str=None):
        for x in Iterable:
            a = QListWidgetItem(x)
            a.setToolTip(x)
            self.addItem(a)

    def contextMenuEvent(self, event: QtGui.QContextMenuEvent):
        if self.itemAt(self.mapFromGlobal(self.cursor().pos())) is not None:  # 如果有item则添加"修改"菜单[1] *
            self.popMenu.exec(self.cursor().pos())  # 菜单出现的位置为当前鼠标的位置


class player(QObject):
    sendlrc = QtCore.pyqtSignal(str)
    changepix = QtCore.pyqtSignal(int)
    changepb = QtCore.pyqtSignal(int)
    sendcur = QtCore.pyqtSignal(list)

    def __init__(self, w, lrc_map, pgar):
        super().__init__(w)
        self.isstop = False
        self.player = QMediaPlayer(parent=w)
        self.lrc_map: QTextBrowser = lrc_map
        self.pgar: ProgressBar = pgar
        self.player_list = []  # 播放列表{title,author,type,song,lrc,url,lrc_content,pix}
        self.player_index = 0  # 播放列表下标
        self.player_mode = 0  # 播放模式 0单曲循环 1列表播放 2随机播放
        self.lrc = {}  # 当前歌词
        self.final_time = 0  # 最终时间
        self.last_index = 0  # 播放歌词上个下标
        self.index = 0  # 播放歌词下标
        self.t = None  # 计时器:threading.Timer
        self.gd = []  # 歌单名列表
        self.isplaying = ''  # 正在播放的歌曲地址
        self.toplrc = Lrc()  # 桌面歌词
        self.list_type = Y.SELF
        self.player.mediaStatusChanged.connect(self.change_mediastatu)
        self.player.durationChanged.connect(self.this_time)
        self.player.positionChanged.connect(self.set_position)
        self.toplrc.sendnext.connect(self.change_player_index)
        if fs.os.path.exists(gm.st.path_json + '/play_list.json'):
            self.player_list += fs.read_json('play_list')
        path_lrc_map = "resource/lrc.html"
        with open(path_lrc_map, 'r', encoding='utf-8')as f:
            self.base = f.read()

    # 将歌词存入数组
    def parse_lrc(self, lrc_list: list):
        time_list = []
        list = []
        for x in lrc_list:
            box = "<div class=\"caption_item_box\">value\n</div>"
            ms = int(x[0]) * 60 * 1000 + int(x[1]) * 1000 + int(x[2])
            time_list.append(ms)
            list.append(box.replace('value', x[3]))
            self.toplrc.lrc.append(x[3])
            pass
        l = time_list.copy()
        l.sort()
        if l != time_list:
            ll = []
            p = re.compile(r'<(.*?)>(.*)<(.*?)>', re.S)
            self.toplrc.lrc.clear()
            for x in l:
                i = time_list.index(x)
                ll.append(list[i])
                m = re.findall(p, list[i])
                self.toplrc.lrc.append(m[0][1])
            self.lrc['time'] = l
            self.lrc['lrc'] = ll
        else:
            self.lrc['time'] = time_list
            self.lrc['lrc'] = list

    # 设置定时器
    def set_t(self):
        if self.t == -1:
            return
        if self.t is not None:
            self.t.cancel()
        self.t = threading.Timer((self.lrc['time'][self.index] - self.lrc['time'][self.index - 1]) / 1000,
                                 self.update_lrc_map)
        self.t.setDaemon(True)
        self.t.start()

    # 更改歌词面板
    def update_lrc_map(self):
        if self.player.state() == 2 or len(self.lrc) == 0:  # 暂停状态
            return False
        if self.index != 0:
            self.lrc['lrc'][self.last_index] = self.lrc['lrc'][self.last_index].replace('caption_item_selected_box',
                                                                                        'caption_item_box').replace(
                '<div id=\"this\"', '<div')
        self.lrc['lrc'][self.index] = self.lrc['lrc'][self.index].replace('caption_item_box',
                                                                          'caption_item_selected_box').replace('<div',
                                                                                                               '<div id=\"this\"')
        self.last_index = self.index
        self.sendlrc.emit(self.base.replace('fc1', gm.st.conf.get('base', 'fc1')).replace('fc2', gm.st.conf.get('base',
                                                                                                                'fc2')).replace(
            'value', ''.join(self.lrc['lrc'])))
        if not self.toplrc.isHidden():
            self.toplrc.settext(self.index)
        self.index += 1
        try:
            l = len(self.lrc['lrc'])
            if self.index < l:
                self.set_t()
                return True
        except:
            print(self.lrc)

    # 设置播放位置
    def set_position(self):
        if self.final_time == 0:
            return
        ms = self.player.position()
        per = int(ms / self.final_time * 100)
        self.pgar.setValue(per)
        self.pgar.setFormat("%02d:%02d/%02d:%02d" % (
            int(ms / 1000 / 60), int((ms % (1000 * 60)) / 1000), int(self.final_time / 1000 / 60),
            int((self.final_time % (1000 * 60)) / 1000)))

    # 快进 退后：
    def change_position(self, p: float, t: int):
        if self.player.state() == QMediaPlayer.PlayingState:
            p = int(p * self.final_time)
            if t == 1:
                self.player.setPosition(p)
                end = len(self.lrc['time'])
                if p <= self.lrc['time'][0]:
                    self.index = 0
                else:
                    for i in range(1, end):
                        if self.lrc['time'][i - 1] < p <= self.lrc['time'][i]:
                            self.index = i - 1
                            break
                self.update_lrc_map()
                if self.t is not None:
                    self.t.cancel()
                self.t = threading.Timer(
                    (self.lrc['time'][self.index] - p) / 1000,
                    self.update_lrc_map)
                self.t.setDaemon(True)
                self.t.start()

            else:
                self.pgar.setToolTip("%02d:%02d" % (int(p / 1000 / 60), int((p % (1000 * 60)) / 1000)))

    # 播放
    def myplay(self):
        if self.isstop:
            self.isstop = False
        self.lrc = {}  # 当前歌词
        self.index = 0  # 播放歌词下标
        self.lrc_map.clear()
        self.toplrc.reset()
        self.pgar.setValue(0)
        self.pgar.setFormat('00:00')
        if self.player_list[self.player_index]['lrc_content'] is None:
            if self.player_list[self.player_index]['lrc'] is None:
                lrc_mes = ''
            else:
                with open(self.player_list[self.player_index]['lrc'], 'r', encoding='utf-8')as f:
                    lrc_mes = f.read()
                    pass
        else:
            lrc_mes = self.player_list[self.player_index]['lrc_content']
        song_url = self.player_list[self.player_index]['song']
        if 'mp3' not in song_url and 'wav' not in song_url:
            h = fs.trans_vedio(song_url)
            if h:
                song_url = h
            else:
                return
        self.player.setMedia(QMediaContent(QUrl.fromLocalFile(song_url)))
        self.player_list[self.player_index]['song'] = song_url
        if len(lrc_mes) == 0:
            self.lrc_map.setHtml("<html><head/><body><p align=\"center\"><span style=\" font-size:17pt; "
                                 "font-weight:300; color: %s!important;\">无歌词</span></p></body></html>"
                                 % gm.st.conf.get('base', 'fc1'))
            self.toplrc.lrc.append('无歌词')
            self.toplrc.label.setText('无歌词')
            self.t = -1
        else:
            if self.t == -1:
                self.t = None
            pattern = re.compile("\[(\d+):(\d+).(\d+)\](.*)")
            lrc_list = re.findall(pattern, lrc_mes)
            self.parse_lrc(lrc_list)
            pass
        if self.player_list[self.player_index]['pix'] is not None:
            gm.get_pix(self.player_list[self.player_index]['pix'])
            self.changepb.emit(1)
        else:
            self.changepb.emit(-1)
        self.changepix.emit(-1)
        self.sendcur.emit(fs.splite_filename([song_url]))
        self.isplaying = song_url

    # 播放列表
    def add_player_list(self, list: list):
        ll = ['title', 'author', 'type', 'song', 'lrc', 'url', 'lrc_content', 'pix']
        for x in list:
            d = {}
            j = 0
            for i in range(0, len(x)):
                d[ll[i]] = x[i]
                j = i + 1
            while j < len(ll):
                d[ll[j]] = None
                j += 1
            if d['lrc_content'] is not None and 'http' in d['lrc_content']:
                d['lrc_content'] = gm.requests.get(url=d['lrc_content'], headers=gm.heard).text.encode('UTF-8').decode(
                    'unicode_escape')
            self.player_list.append(d)
        return len(self.player_list) - 1

    # 播放列表搜索
    def find_player_list(self, list: list):
        for x in self.player_list:
            if x['title'] == list[0] and x['author'] == list[1]:
                return self.player_list.index(x)
        return -1

    # 改变播放状态
    def changestate(self):
        if self.player.state() == 1:  # 播放状态
            self.player.pause()
            self.changepix.emit(1)
            if len(self.lrc) != 0:
                self.t.cancel()
        else:
            if self.player.state() == 2:  # 暂停状态
                self.player.play()
                self.changepix.emit(-1)
                if len(self.lrc) != 0:
                    if self.t is not None:
                        self.t.cancel()
                    self.t = threading.Timer((self.lrc['time'][self.index] - self.player.position()) / 1000,
                                             self.update_lrc_map)
                    self.t.setDaemon(True)
                    self.t.start()

    # 停止播放
    def stop(self):
        self.isstop = True
        self.player.stop()
        self.t.cancel()
        self.toplrc.reset()
        self.lrc_map.clear()
        self.pgar.setValue(0)
        self.changepb.emit(-1)
        self.pgar.setFormat('00:00')
        self.changepix.emit(-1)

    # 改变播放下标
    def change_player_index(self, type: int):
        if type == 0 and self.player_mode == 2:
            self.player_index = random.randint(0, len(self.player_list) - 1)
            self.myplay()
            return
        if type > 0:
            self.player_index += 1
            if self.player_index >= len(self.player_list):
                self.player_index = 0
            self.myplay()
        else:
            if type == 0:
                self.changestate()
            else:
                self.player_index -= 1
                if self.player_index < 0:
                    self.player_index = len(self.player_list) - 1
                self.myplay()

    # 获得歌曲时长 durationchanged
    def this_time(self):
        self.final_time = self.player.duration()

    # 歌曲状态改变
    def change_mediastatu(self, statu):
        if statu == QMediaPlayer.LoadedMedia:
            if self.isstop:
                return
            self.player.play()
            self.set_t()
        else:
            if statu == QMediaPlayer.EndOfMedia:
                if self.player_mode == 1:
                    self.player_index += 1
                else:
                    if self.player_mode == 2:
                        self.player_index = random.randint(0, len(self.player_list) - 1)
                self.myplay()


class Ui_Widget(QWidget):
    def __init__(self):
        super().__init__()
        self.setMouseTracking(True)
        self.pop = None
        self.mes = None
        self.right_main = None  # todo 主面板右键
        self.setupUi()
        self.pix_show.setPixmap(QtGui.QPixmap("resource/pix.png"))

    def setupUi(self):
        self.setObjectName("Yuye")
        self.resize(1033, 831)
        self.verticalLayout_9 = QVBoxLayout(self)
        self.verticalLayout_9.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_9.setSpacing(6)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.horizontalLayout_5 = QHBoxLayout()
        self.horizontalLayout_5.setContentsMargins(-1, -1, -1, 0)
        self.horizontalLayout_5.setSpacing(6)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.play_mes = QWidget(self)
        self.play_mes.setObjectName("play_mes")
        self.verticalLayout_5 = QVBoxLayout(self.play_mes)
        self.verticalLayout_5.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_5.setSpacing(6)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.stackedWidget = QStackedWidget(self.play_mes)
        self.stackedWidget.setObjectName("stackedWidget")
        self.page_1 = QWidget()
        self.page_1.setObjectName("page_1")
        self.verticalLayout = QVBoxLayout(self.page_1)
        self.verticalLayout.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout.setSpacing(6)
        self.verticalLayout.setObjectName("verticalLayout")
        self.H1 = QHBoxLayout()
        self.H1.setSpacing(6)
        self.H1.setObjectName("H1")
        self.label = Label(self.page_1)
        self.label.setMaximumSize(QtCore.QSize(100, 16777215))
        self.label.setObjectName("label")
        self.H1.addWidget(self.label)
        self.type_seach = QComboBox(self.page_1)
        self.type_seach.setObjectName("type_seach")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.type_seach.addItem("")
        self.H1.addWidget(self.type_seach)
        self.search = QLineEdit(self.page_1)
        self.search.setMinimumSize(QtCore.QSize(0, 25))
        self.search.setStyleSheet("font: 12pt ;")
        self.search.setText("")
        self.search.setObjectName("search")
        self.H1.addWidget(self.search)
        self.verticalLayout.addLayout(self.H1)
        self.search_list = TableWidget(self.page_1)
        self.search_list.setMinimumSize(QtCore.QSize(350, 550))
        self.search_list.setObjectName("search_list")
        self.search_list.setColumnCount(0)
        self.search_list.setRowCount(0)
        self.verticalLayout.addWidget(self.search_list)
        self.stackedWidget.addWidget(self.page_1)
        self.page_2 = QWidget()
        self.page_2.setObjectName("page_2")
        self.verticalLayout_4 = QVBoxLayout(self.page_2)
        self.verticalLayout_4.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_4.setSpacing(6)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout = QHBoxLayout()
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.my_list = ToolBttun(self.page_2)
        self.my_list.setObjectName("my_list")
        self.horizontalLayout.addWidget(self.my_list)
        self.local = ToolBttun(self.page_2)
        self.local.setObjectName("local")
        self.horizontalLayout.addWidget(self.local)
        self.set = ToolBttun(self.page_2)
        self.set.setObjectName("set")
        self.horizontalLayout.addWidget(self.set)
        self.verticalLayout_4.addLayout(self.horizontalLayout)
        self.my_set = QStackedWidget(self.page_2)
        self.my_set.setObjectName("my_set")
        self.page_4 = QWidget()
        self.page_4.setObjectName("page_4")
        self.verticalLayout_6 = QVBoxLayout(self.page_4)
        self.verticalLayout_6.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_6.setSpacing(6)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.local_table = TableWidget(self.page_4)
        self.local_table.setObjectName("local_table")
        self.local_table.setColumnCount(0)
        self.local_table.setRowCount(0)
        self.verticalLayout_6.addWidget(self.local_table)
        self.horizontalLayout_4 = QHBoxLayout()
        self.horizontalLayout_4.setSpacing(6)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.search_local = ToolBttun(self.page_4)
        self.search_local.setEnabled(True)
        self.search_local.setObjectName("search_local")
        self.horizontalLayout_4.addWidget(self.search_local)
        self.verticalLayout_6.addLayout(self.horizontalLayout_4)
        self.my_set.addWidget(self.page_4)
        self.page = QWidget()
        self.page.setObjectName("page")
        self.verticalLayout_7 = QVBoxLayout(self.page)
        self.verticalLayout_7.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_7.setSpacing(15)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.play_list = TableWidget(self.page)
        self.play_list.setObjectName("play_list")
        self.play_list.setColumnCount(0)
        self.play_list.setRowCount(0)
        self.verticalLayout_7.addWidget(self.play_list)
        self.clear_pl = ToolBttun(self.page)
        self.clear_pl.setObjectName('clear_pl')
        self.my_set.addWidget(self.page)
        self.verticalLayout_7.addWidget(self.clear_pl, alignment=QtCore.Qt.Alignment(QtCore.Qt.AlignCenter))
        self.clear_pl.setText('清空列表')

        self.page_5 = QWidget()
        self.page_5.setObjectName("page_5")
        self.horizontalLayout_6 = QHBoxLayout(self.page_5)
        self.horizontalLayout_6.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_6.setSpacing(6)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.gd_list = ListWidget()
        self.gd_list.setObjectName("gd_list")
        self.gdsong_list = TableWidget()
        self.gdsong_list.setObjectName("gdsong_list")
        self.gdsong_list.setColumnCount(0)
        self.gdsong_list.setRowCount(0)
        self.horizontalLayout_6.addWidget(self.gd_list)
        self.horizontalLayout_6.addWidget(self.gdsong_list)
        self.gdsong_list.setMinimumWidth(331)
        self.my_set.addWidget(self.page_5)
        self.page_3 = QWidget()
        self.page_3.setObjectName("page_3")
        self.v=QVBoxLayout(self.page_3)
        self.page_3.setLayout(self.v)
        self.sc=QScrollArea()
        self.v.addWidget(self.sc)
        self.verticalLayout_3 = QVBoxLayout(self.page_3)
        self.ww=QWidget(self.page_3)
        self.ww.setLayout(self.verticalLayout_3)
        self.sc.setWidget(self.ww)
        self.sc.setWidgetResizable(True)
        self.sc.setStyleSheet('background:transparent;border:none')
        self.verticalLayout_3.setContentsMargins(11, 11, 11, 11)
        self.verticalLayout_3.setSpacing(6)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame = QFrame(self.page_3)
        self.frame.setFrameShape(QFrame.StyledPanel)
        self.frame.setFrameShadow(QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_6 = QHBoxLayout(self.frame)
        self.horizontalLayout_6.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_6.setSpacing(6)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.path = Label(self.frame)
        self.path.setObjectName("path")
        self.horizontalLayout_6.addWidget(self.path)
        self.pathedit = QLineEdit(self.frame)
        self.pathedit.setObjectName("pathedit")
        self.horizontalLayout_6.addWidget(self.pathedit)
        self.setpath = ToolBttun(self.frame, 32, 32)
        self.setpath.setObjectName("setpath")
        self.horizontalLayout_6.addWidget(self.setpath)
        self.verticalLayout_3.addWidget(self.frame)
        self.frame_6 = QFrame(self.page_3)
        self.frame_6.setFrameShape(QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_10 = QHBoxLayout(self.frame_6)
        self.horizontalLayout_10.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_10.setSpacing(6)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.downpath = Label(self.frame_6)
        self.downpath.setObjectName("downpath")
        self.horizontalLayout_10.addWidget(self.downpath)
        self.downpathedit = QLineEdit(self.frame_6)
        self.downpathedit.setObjectName("downpathedit")
        self.horizontalLayout_10.addWidget(self.downpathedit)
        self.setdownpath = ToolBttun(self.frame_6, 32, 32)
        self.setdownpath.setObjectName("setdownpath")
        self.horizontalLayout_10.addWidget(self.setdownpath)
        self.verticalLayout_3.addWidget(self.frame_6)
        self.frame_8 = QFrame(self.page_3)
        self.frame_8.setFrameShape(QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.horizontalLayout_12 = QHBoxLayout(self.frame_8)
        self.horizontalLayout_12.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_12.setSpacing(6)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.filters = Label(self.frame_8)
        self.filters.setObjectName("filters")
        self.horizontalLayout_12.addWidget(self.filters)
        self.addfilter=QLineEdit(self.frame_8)
        self.addfilter.hide()
        self.horizontalLayout_12.addWidget(self.addfilter)
        self.addf=ToolBttun(self.frame_8,32,32,25)
        self.subf=ToolBttun(self.frame_8,32,32,25)
        self.filterBox = QComboBox(self.frame_8)
        self.horizontalLayout_12.addWidget(self.addf)
        self.horizontalLayout_12.addWidget(self.subf)
        self.addf.setText('+')
        self.subf.setText('-')
        self.filterBox.setMaximumSize(QtCore.QSize(75, 16777215))
        self.filterBox.setObjectName("filterBox")
        self.filterBox.addItem("")
        self.filterBox.addItem("")
        self.filterBox.addItem("")
        self.horizontalLayout_12.addWidget(self.filterBox)
        self.verticalLayout_3.addWidget(self.frame_8)
        self.frame_2 = QFrame(self.page_3)
        self.frame_2.setFrameShape(QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_7 = QHBoxLayout(self.frame_2)
        self.horizontalLayout_7.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_7.setSpacing(6)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.fontcolor = Label(self.frame_2)
        self.fontcolor.setObjectName("fontcolor")
        self.horizontalLayout_7.addWidget(self.fontcolor)
        self.font_color = ToolBttun(self.frame_2, 32, 32)
        self.font_color.setStyleSheet("background-color:%s" % FC)
        self.font_color.setText("")
        self.font_color.setObjectName("font_color")
        self.horizontalLayout_7.addWidget(self.font_color)
        self.verticalLayout_3.addWidget(self.frame_2)
        self.frame_5 = QFrame(self.page_3)
        self.frame_5.setFrameShape(QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_13 = QHBoxLayout(self.frame_5)
        self.horizontalLayout_13.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_13.setSpacing(6)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.map_fc = Label(self.frame_5)
        self.map_fc.settext('歌词面板字体颜色')
        self.fc1 = ToolBttun(self.frame_5, 32, 32)
        self.fc2 = ToolBttun(self.frame_5, 32, 32)
        self.horizontalLayout_13.addWidget(self.map_fc)
        self.horizontalLayout_13.addWidget(self.fc1)
        self.horizontalLayout_13.addWidget(self.fc2)
        self.fc1.setStyleSheet("background-color:%s" % gm.st.conf.get('base', 'fc1'))
        self.fc2.setStyleSheet("background-color:%s" % gm.st.conf.get('base', 'fc2'))
        self.verticalLayout_3.addWidget(self.frame_5)
        self.frame_3 = QFrame(self.page_3)
        self.frame_3.setFrameShape(QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_8 = QHBoxLayout(self.frame_3)
        self.horizontalLayout_8.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_8.setSpacing(6)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.tmd = Label(self.frame_3)
        self.tmd.setObjectName("tmd")
        self.horizontalLayout_8.addWidget(self.tmd)
        self.settmd = Slider(self.frame_3, -1)
        self.settmd.setMaximum(100)
        self.settmd.setOrientation(QtCore.Qt.Horizontal)
        self.settmd.setObjectName("settmd")
        self.horizontalLayout_8.addWidget(self.settmd)
        self.verticalLayout_3.addWidget(self.frame_3)
        self.frame_7 = QFrame(self.page_3)
        self.frame_7.setFrameShape(QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_11 = QHBoxLayout(self.frame_7)
        self.horizontalLayout_11.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_11.setSpacing(6)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.isclear = QCheckBox(self.frame_7)
        self.isclear.setObjectName("isclear")
        self.horizontalLayout_11.addWidget(self.isclear)
        self.clear_temp = ToolBttun(self.frame_7)
        self.clear_temp.setObjectName("clear_temp")
        self.horizontalLayout_11.addWidget(self.clear_temp)
        self.verticalLayout_3.addWidget(self.frame_7)
        self.frame_4 = QFrame(self.page_3)
        self.frame_4.setFrameShape(QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QFrame.Raised)
        self.frame_4.setObjectName("frame")
        self.horizontalLayout_9 = QHBoxLayout(self.frame_4)
        self.horizontalLayout_9.setContentsMargins(11, 11, 11, 11)
        self.horizontalLayout_9.setSpacing(6)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.bjpix = QCheckBox(self.frame_4)
        self.bjpix.setObjectName("bjpix")
        self.horizontalLayout_9.addWidget(self.bjpix)
        self.pix_show = QLabel(self.frame_4)
        self.pix_show.setObjectName("pix_show")
        self.pix_show.setMaximumSize(QtCore.QSize(300, 150))
        self.pix_show.setMinimumSize(QtCore.QSize(300, 150))
        self.pix_show.setScaledContents(True)
        self.horizontalLayout_9.addWidget(self.pix_show)
        self.setbj = ToolBttun(self.frame_4, 32, 32)
        self.setbj.setObjectName("setbj")
        self.setbj.setText("…")
        self.horizontalLayout_9.addWidget(self.setbj)
        self.verticalLayout_3.addWidget(self.frame_4)
        self.listView = QListView(self.page_3)
        self.listView.setStyleSheet("background-color:transparent")
        self.listView.setFrameShape(QListView.NoFrame)
        self.listView.setObjectName("listView")
        self.verticalLayout_3.addWidget(self.listView)
        self.my_set.addWidget(self.page_3)
        self.verticalLayout_4.addWidget(self.my_set)
        self.stackedWidget.addWidget(self.page_2)
        self.verticalLayout_5.addWidget(self.stackedWidget)
        self.horizontalLayout_5.addWidget(self.play_mes)
        self.verticalLayout_8 = QVBoxLayout()
        self.verticalLayout_8.setSpacing(6)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.lrc_label = Label(self)
        self.lrc_label.setScaledContents(False)
        self.lrc_label.setObjectName("lrc_label")
        spacerItem = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem)
        self.verticalLayout_8.addWidget(self.lrc_label)
        self.lrc_map = QTextBrowser(self)
        self.lrc_map.setMinimumSize(QtCore.QSize(0, 400))
        self.lrc_map.setMaximumWidth(400)
        self.lrc_map.setObjectName("lrc_map")
        self.verticalLayout_8.addWidget(self.lrc_map)
        spacerItem1 = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)
        self.verticalLayout_8.addItem(spacerItem1)
        self.horizontalLayout_5.addLayout(self.verticalLayout_8)
        self.verticalLayout_9.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_2 = QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout_2.setSpacing(6)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.playbutton = ToolBttun(self)
        self.playbutton.setMinimumSize(QtCore.QSize(150, 150))
        self.playbutton.setMaximumSize(QtCore.QSize(150, 150))
        self.playbutton.setObjectName("playbutton")
        self.horizontalLayout_2.addWidget(self.playbutton)
        self.verticalLayout_2 = QVBoxLayout()
        self.verticalLayout_2.setSpacing(6)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QHBoxLayout()
        self.horizontalLayout_3.setContentsMargins(0, 30, -1, 10)
        self.horizontalLayout_3.setSpacing(6)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.mode = QComboBox(self)
        self.mode.setMaximumSize(QtCore.QSize(110, 16777215))
        self.mode.setObjectName("mode")
        self.mode.addItem("")
        self.mode.addItem("")
        self.mode.addItem("")
        self.horizontalLayout_3.addWidget(self.mode)
        self.next = ToolBttun(self)
        self.next.setObjectName("next")
        self.previous = ToolBttun(self)
        self.previous.setObjectName("previous")
        self.horizontalLayout_3.addWidget(self.previous)
        self.horizontalLayout_3.addWidget(self.next)
        self.show_player_list = ToolBttun(self)
        self.show_player_list.setObjectName("show_player_list")
        self.horizontalLayout_3.addWidget(self.show_player_list)
        self.show_lrc = ToolBttun(self)
        self.show_lrc.setObjectName('show_lrc')
        self.horizontalLayout_3.addWidget(self.show_player_list)
        self.horizontalLayout_3.addWidget(self.show_lrc)
        self.show_detail = Label()
        self.verticalLayout_2.addWidget(self.show_detail)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.progressBar = ProgressBar(self)
        self.progressBar.setMaximumSize(QtCore.QSize(16777215, 12))
        self.progressBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.progressBar.setAutoFillBackground(False)
        self.progressBar.setStyleSheet("QProgressBar {\n"
                                       "    text-align: right;\n"
                                       "}\n"
                                       " \n"
                                       "QProgressBar::chunk {\n"
                                       "   background-color: #76e4f6;\n"
                                       "}\n"
                                       " \n"
                                       "")
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(True)
        self.progressBar.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar.setTextDirection(QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_2.addWidget(self.progressBar)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        self.volume = Slider(self, 1)
        self.volume.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.volume.setProperty("value", 50)
        self.volume.setOrientation(QtCore.Qt.Vertical)
        self.volume.setObjectName("volume")
        self.horizontalLayout_2.addWidget(self.volume)
        self.verticalLayout_9.addLayout(self.horizontalLayout_2)
        self.statusbar = QStatusBar(self)
        self.verticalLayout_9.addWidget(self.statusbar)
        self.setStyleSheet("QWidget QLineEdit"
                           "{border:2px;color:black;background-color:rgba(255, 255, 255,200);"
                           "border-radius:5px;padding:2px 4px;/*border-radius控制圆角大小*/  }"
                           "/* 未下拉时，QComboBox的样式 */"
                           "QWidget QComboBox {"
                           "border: 2px solid %s;   /* 边框 */"
                           "border-radius: 3px;   /* 圆角 */"
                           "padding: 1px 18px 1px 3px;   /* 字体填衬 */"
                           "color: %s;"
                           "font: normal normal 18px \"楷体\";"
                           "background: transparent;"
                           "}"
                           "/* 下拉后，整个下拉窗体样式 */"
                           "QWidget QComboBox QAbstractItemView {"
                           "outline: 0px solid gray;   /* 选定项的虚框 */"
                           "border: 1px solid %s;   /* 整个下拉窗体的边框 */"
                           "color: black;"
                           "background-color: rgb(255, 255, 255,255);   /* 整个下拉窗体的背景色 */"
                           "selection-background-color: rgb(43, 43, 43, 200);   /* 整个下拉窗体被选中项的背景色 */"
                           "}"
                           "/* QComboBox中的垂直滚动条 */"
                           "QWidget QComboBox QAbstractScrollArea QScrollBar:vertical {"
                           "width: 10px;"
                           "background-color: #d0d2d4;   /* 空白区域的背景色*/"
                           "}"
                           "QWidget QComboBox QAbstractScrollArea QScrollBar::handle:vertical {"
                           "border-radius: 5px;   /* 圆角 */"
                           "background: rgb(160,160,160);   /* 小方块的背景色深灰lightblue */"
                           "}"
                           "QWidget QComboBox QAbstractScrollArea QScrollBar::handle:vertical:hover {"
                           "background: rgb(90, 91, 93);   /* 越过小方块的背景色yellow */}"
                           "QWidget QCheckBox{color:%s;font-size:20px;font-family:楷体;font-weight:600}" % (
                           FC, FC, FC, FC))
        self.ww.setStyleSheet("QWidget QLineEdit"
                           "{border:2px;color:black;background-color:rgba(255, 255, 255,200);"
                           "border-radius:5px;padding:2px 4px;/*border-radius控制圆角大小*/  }"
                           "/* 未下拉时，QComboBox的样式 */"
                           "QWidget QComboBox {"
                           "border: 2px solid %s;   /* 边框 */"
                           "border-radius: 3px;   /* 圆角 */"
                           "padding: 1px 18px 1px 3px;   /* 字体填衬 */"
                           "color: %s;"
                           "font: normal normal 18px \"楷体\";"
                           "background: transparent;"
                           "}"
                           "/* 下拉后，整个下拉窗体样式 */"
                           "QWidget QComboBox QAbstractItemView {"
                           "outline: 0px solid gray;   /* 选定项的虚框 */"
                           "border: 1px solid %s;   /* 整个下拉窗体的边框 */"
                           "color: black;"
                           "background-color: rgb(255, 255, 255,255);   /* 整个下拉窗体的背景色 */"
                           "selection-background-color: rgb(43, 43, 43, 200);   /* 整个下拉窗体被选中项的背景色 */"
                           "}"
                           "/* QComboBox中的垂直滚动条 */"
                           "QWidget QComboBox QAbstractScrollArea QScrollBar:vertical {"
                           "width: 10px;"
                           "background-color: #d0d2d4;   /* 空白区域的背景色*/"
                           "}"
                           "QWidget QComboBox QAbstractScrollArea QScrollBar::handle:vertical {"
                           "border-radius: 5px;   /* 圆角 */"
                           "background: rgb(160,160,160);   /* 小方块的背景色深灰lightblue */"
                           "}"
                           "QWidget QComboBox QAbstractScrollArea QScrollBar::handle:vertical:hover {"
                           "background: rgb(90, 91, 93);   /* 越过小方块的背景色yellow */}"
                           "QWidget QCheckBox{color:%s;font-size:20px;font-family:楷体;font-weight:600}" % (
                           FC, FC, FC, FC))
        self.mysetupUi()

        self.retranslateUi()
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

    def mysetupUi(self):
        self.lrc_map.setFont(QtGui.QFont('楷体'))
        self.pathedit.setEnabled(False)
        self.downpathedit.setText(gm.st.conf.get('path_section', 'path'))
        self.settmd.setValue(int(int(gm.st.conf.get('lrc_section', 'fc1').split(',')[3]) / 255 * 100))
        self.setpath.setText('…')
        self.downpathedit.setEnabled(False)
        self.isclear.setChecked(gm.st.conf.getboolean('base', 'isclear'))
        self.fontcolor.settext('字体颜色')
        self.path.settext('路径')
        self.tmd.settext('桌面歌词透明度')
        self.search.setPlaceholderText('请输入歌名、歌手')
        self.search.setClearButtonEnabled(True)
        self.pathedit.setText(gm.st.conf.get('path_section', 'path_exe'))
        self.statusbar.setStyleSheet('color:%s;font-family:楷体;font-size:16px;' % FC)
        self.setWindowIcon(QtGui.QIcon('resource/Yuyeicon.ico'))
        self.lrc_map.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.lrc_map.setStyleSheet("border-image:url(resource/3.png)")
        self.search_list.setToolTip('下滑，加载更多')
        self.playbutton.setStyleSheet("QToolButton{border-image:url(resource/null.png)}")
        self.next.setStyleSheet("QToolButton{border-image:url(resource/Next.png)}")
        self.show_lrc.setText('词')
        self.show_lrc.setStyleSheet("QToolButton"
                                    "{border:none;color:%s;background-color:rgba(120,127,131,0);width:50px;height:50px;font-family:楷体;font-size:30px;font-weight:600;"
                                    "border-radius:5px;padding:2px 4px;/*border-radius控制圆角大小*/  }"
                                    "QToolButton:hover{  /*鼠标放上后*/  color:rgb(255, 255, 255);  min-height:20;  border-style:solid;  border-top-left-radius:2px;  border-top-right-radius:2px;  background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop:0 rgb(226,236,241),   stop: 0.3 rgb(160,160,160),  stop: 1 rgb(120,120,120));  border:1px;  border-radius:5px;padding:2px 4px;  }"
                                    "QToolButton:pressed{ /*按下按钮后*/  "
                                    "color:rgb(255, 255, 255);  min-height:20;  border-style:solid;  border-top-left-radius:2px;  border-top-right-radius:2px;  "
                                    "background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop:0 rgb(226,236,241),   "
                                    "stop: 0.3 rgb(190,190,190), "
                                    "stop: 1 rgb(160,160,160));  "
                                    "border:1px;  border-radius:5px;padding:2px 4px;  }  "
                                    "QToolButton:checked{    /*选中后*/  "
                                    "color:rgb(255, 255, 255);  min-height:20;  border-style:solid;  border-top-left-radius:2px;  border-top-right-radius:2px;  "
                                    "background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1, stop:0 rgb(226,236,241),   "
                                    "stop: 0.3 rgb(190,190,190),  "
                                    "stop: 1 rgb(160,160,160));  "
                                    "border:1px;  border-radius:5px;padding:2px 4px;  }  " % FC)
        self.previous.setStyleSheet("QToolButton{border-image:url(resource/Previous.png)}")
        self.set.setStyleSheet("border-image:url(resource/set1.png)")
        self.set.setToolTip('设置')
        self.show_player_list.setStyleSheet("QToolButton{border-image:url(resource/play_list.png)}")
        self.previous.setFixedSize(QtCore.QSize(50, 50))
        self.next.setFixedSize(QtCore.QSize(50, 50))
        self.show_player_list.setFixedSize(QtCore.QSize(50, 50))
        self.playbutton.setIconSize(QtCore.QSize(150, 150))
        self.playbutton.setIcon(QtGui.QIcon('resource/play.png'))
        self.bjpix.setChecked(gm.st.conf.getboolean('base', 'isauto'))
        setPix(self, "resource/pix.png", gm.st.conf.getboolean('base', 'isauto'))

        self.player = player(w=self, lrc_map=self.lrc_map, pgar=self.progressBar)
        self.handle = gm.handle_music()
        self.handle2 = gm.handle_vip()

        self.setslots()
        self.setWindowTitle("Yuye")
        self.my_set.setCurrentIndex(0)
        self.setToolTip('左右移切换界面')

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Widget", "Yuye"))
        self.label.setText('搜索')
        self.label.setAlignment(QtCore.Qt.Alignment(QtCore.Qt.AlignCenter))
        self.bjpix.setText("设置\n背景\n图片\n是否\n填充")
        self.downpath.setText(_translate("Widget", "下载路径"))
        self.setdownpath.setText(_translate("Widget", "…"))
        self.isclear.setText(_translate("Widget", "每次关闭是否自动清除缓存"))
        self.clear_temp.setText(_translate("Widget", "清除缓存"))
        self.filters.setText(_translate("Widget", "支持类型："))
        self.filterBox.setItemText(0, _translate("Widget", ".mp3"))
        self.filterBox.setItemText(1, _translate("Widget", ".wav"))
        self.filterBox.setItemText(2, _translate("Widget", ".m4a"))

        self.type_seach.setItemText(0, _translate("Widget", "网易云"))
        self.type_seach.setItemText(1, _translate("Widget", "QQ音乐"))
        self.type_seach.setItemText(2, _translate("Widget", "酷狗音乐"))
        self.type_seach.setItemText(3, _translate("Widget", "虾米音乐"))
        self.type_seach.setItemText(4, _translate("Widget", "全面K歌"))
        self.type_seach.setItemText(5, _translate("Widget", "网易云2"))
        self.type_seach.setItemText(6, _translate("Widget", "QQ音乐2"))
        self.type_seach.setItemText(7, _translate("Widget", "酷狗音乐2"))
        self.type_seach.setItemText(8, _translate("Widget", "咪咕音乐2"))
        self.my_list.setText(_translate("Widget", "我的歌单"))
        self.local.setText(_translate("Widget", "本地音乐"))
        self.search_local.setText(_translate("Widget", "全局搜索"))
        self.lrc_label.setText(_translate("Widget",
                                          "<html><head/><body><p align=\"center\"><span style=\" font-size:16pt; "
                                          "font-weight:600; font-style:italic; "
                                          "color:%s;\">歌词面板</span></p></body></html>" % FC))
        self.mode.setItemText(0, _translate("Widget", "单曲循环"))
        self.mode.setItemText(1, _translate("Widget", "列表循环"))
        self.mode.setItemText(2, _translate("Widget", "随机播放"))
        self.show_player_list.setToolTip("播放列表")
        self.next.setToolTip('下一首')
        self.previous.setToolTip('上一首')
        self.playbutton.setToolTip('播放')
        self.progressBar.setFormat(_translate("Widget", "00:00"))
        self.volume.setToolTip(_translate("Widget", "<html><head/><body><p>%d</p></body></html>" % self.volume.value()))

    # 搜索列表播放
    def play_song_search(self, index):
        if self.player.list_type != Y.SELF:
            self.player.list_type = Y.SELF
            self.player.player_list.clear()
        mes = self.handle.mes_list[index]
        # 先看看播放列表里面有没有，再看看缓存里面有没有，没有就下载，添加至播放列表,再添加到缓存
        result = fs.judge_file(mes[0] + '-' + mes[1], gm.st.path_temp)
        isin = self.player.find_player_list([mes[0], mes[1]])
        if isin == -1:
            if not result:  # 不在播放列表，也不在缓存
                re = gm.temp_song(mes[0] + '-' + mes[1], [mes[2], mes[3]])
                if not re:
                    return False
                else:
                    self.player.player_index = self.player.add_player_list(
                        [[mes[0], mes[1], 1, re[0], re[1], mes[2], mes[3], mes[4]]])
            else:  # 不在播放列表，在缓存
                self.player.player_index = self.player.add_player_list(
                    [[mes[0], mes[1], 1, result, result.replace('.mp3', '歌词.lrc'), mes[2], mes[3], mes[4]]])
        else:
            self.player.player_index = isin
            if self.player.player_list[self.player.player_index]['type'] == -1:  # 在播放列表，不在缓存
                re = gm.temp_song(mes[0] + '-' + mes[1], [mes[2], mes[3]])
                if re:
                    self.player.player_list[self.player.player_index]['type'] = 1
                    self.player.player_list[self.player.player_index]['song'] = re[0]
                    self.player.player_list[self.player.player_index]['lrc'] = re[1]
                else:
                    return False
        self.player.myplay()
        return True

    def play_song_play(self, index):
        self.player.player_index = index
        if self.player.player_list[index]['type'] == 2:
            gm.temp_song(self.player.player_list[index]['title'] + '-' + self.player.player_list[index]['author'],
                         [self.player.player_list[index]['url'], self.player.player_list[index]['lrc_content']])
        self.player.myplay()
        return True

    def play_song_local(self, index):
        try:
            if self.player.list_type != Y.LOCAL:
                self.player.player_list.clear()
                self.player.list_type = Y.LOCAL
                local_list = fs.search_file(gm.st.path)
                name_list = fs.splite_filename(local_list)
                need_list = []
                for i in range(0, len(local_list)):
                    if fs.os.path.exists(fs.os.path.splitext(local_list[i])[0] + '歌词.lrc'):
                        need_list.append(
                            [name_list[i][0], name_list[i][1], 1, local_list[i], fs.os.path.splitext(local_list[i])[0]
                             + '歌词.lrc'])
                    else:
                        need_list.append([name_list[i][0], name_list[i][1], 1, local_list[i]])
                self.player.add_player_list(need_list)
                pass
            self.player.player_index = index
            self.player.myplay()
            return True
        except Exception as e:
            self.printt(e)
            return False

    def play_song_gd(self, index):
        if self.player.list_type != Y.GD:
            self.player.list_type = Y.GD
            self.player.player_list.clear()
            l = fs.read_json(self.gd_list.currentItem().text(), True)
            for x in l:
                x: dict
                x['type'] = 2
                x['song'] = None
                x['lrc'] = None
            self.player.player_list = l
        mes: dict = self.player.player_list[index]
        # 看看缓存里面有没有，没有就下载
        result = fs.judge_file(mes['title'] + '-' + mes['author'], gm.st.path_temp)
        if not result:
            re = gm.temp_song(mes['title'] + '-' + mes['author'], [mes['url'], None])
            if re:
                self.player.player_list[index]['song'] = re[0]
        else:
            self.player.player_list[index]['song'] = result
        self.player.player_index = index
        self.player.myplay()
        return True


    # 改变播放按钮图标
    def changepb(self, i):
        if i < 0:
            self.playbutton.setStyleSheet("QToolButton{border-image:url(resource/null.png)}")
        else:
            self.playbutton.setStyleSheet(
                "QToolButton{border-image:url(" + gm.st.path_temp.replace('\\', '/') + "/temp_pix.jpg)}")

    # 调节音量
    def set_volume(self):
        self.player.player.setVolume(self.volume.value())
        self.printt('设置音量:%d' % self.volume.value())

    # 本地全局搜索
    def search_select_local(self):
        dialog = QFileDialog()
        dirname = dialog.getExistingDirectory()
        file_list = fs.search_file(dirname=dirname)
        self.w = Ui_List(file_list)
        self.w.sendselect.connect(self.search_select_result)

    # 搜索结果筛选
    def search_select_result(self, l: list):
        ll = fs.splite_filename(l)
        self.set_table_item(self.play_list, ll, '选择')
        lll = []
        for i in range(0, len(l)):
            s = fs.os.path.split(l[i])
            result = fs.judge_file(fs.os.path.splitext(s[1])[0] + '歌词', s[0])
            if result:
                lll.append([ll[i][0], ll[i][1], 1, l[i], result])
            else:
                lll.append([ll[i][0], ll[i][1], 1, l[i]])
        self.player.add_player_list(lll)
        self.player.list_type = Y.LOCAL
        self.show_play_list()

    # 清空播放列表
    def clear_playlist(self):
        self.play_list.clear()
        self.play_list.setColumnCount(0)
        self.play_list.setRowCount(0)
        self.player.player_list.clear()

    # 展示本地音乐
    def show_local(self):
        self.my_set.setCurrentIndex(0)
        list = fs.search_file(gm.st.path)
        self.set_table_item(self.local_table, fs.splite_filename(list), '本地')
        if self.player.list_type == Y.LOCAL:
            self.player.player_list.clear()
            name_list = fs.splite_filename(list)
            need_list = []
            for i in range(0, len(list)):
                if fs.os.path.exists(fs.os.path.splitext(list[i])[0] + '歌词.lrc'):
                    need_list.append(
                        [name_list[i][0], name_list[i][1], 1, list[i], fs.os.path.splitext(list[i])[0]
                         + '歌词.lrc'])
                else:
                    need_list.append([name_list[i][0], name_list[i][1], 1, list[i]])
            self.player.add_player_list(need_list)

    # 移动歌曲至新歌单
    def move_song(self, newname):
        oldname = self.gd_list.currentItem().text()
        index = self.gdsong_list.currentIndex().row()
        newl = fs.read_json(newname, True)
        oldl = fs.read_json(oldname, True)
        newl.append(oldl.pop(index))
        fs.write_json(oldname, oldl, True)
        fs.write_json(newname, newl, True)
        self.gdsong_list.removeRow(index)

    # 搜索列表点击播放
    def tableitem_click(self, item: QTableWidgetItem):
        x = item.row()
        y = item.column()
        name = item.tableWidget().objectName()
        if name == 'search_list':
            if y == 2:  # 播放
                if not self.play_song_search(x):
                    self.mes = Ui_mesbox('无法播放')
                pass
            if y == 3:  # 下载
                if not self.handle.down_song(x):
                    Ui_mesbox('无法下载')
                else:
                    Ui_mesbox('下载成功')
                pass
            if y == 4:
                p = self.cursor().pos()
                self.pop = Ui_pop(fs.find_gd(), p.x(), p.y())
                self.pop.sendclickitem.connect(lambda n: self.add_gd(n, item.tableWidget(), x))
                pass
            return
        if name == 'local_table':
            if y == 2:  # 播放
                if not self.play_song_local(x):
                    self.mes = Ui_mesbox('无法播放')
                pass
            if y == 3:  # 删除
                if self.player.list_type == Y.LOCAL and self.player.player_index == x:
                    self.player.stop()
                result = QMessageBox.information(None, '询问', '是否删除本地文件', QMessageBox.Yes and QMessageBox.No,
                                                 QMessageBox.Yes)
                if result == QMessageBox.Yes:
                    fs.delete_file(
                        gm.st.path + '/' + item.tableWidget().item(item.row(),
                                                                   0).text() + '-' + item.tableWidget().item(
                            item.row(), 1).text() + '歌词.lrc')
                    fs.delete_file(
                        gm.st.path + '/' + item.tableWidget().item(item.row(),
                                                                   0).text() + '-' + item.tableWidget().item(
                            item.row(), 1).text() + '.mp3')
                item.tableWidget().removeRow(x)
                if self.player.list_type == Y.LOCAL:
                    self.player.player_list.pop(x)
                self.mes = Ui_mesbox('删除成功')
                pass
            return
        if name == 'play_list':
            if y == 2:  # 播放
                if not self.play_song_play(x):
                    Ui_mesbox('无法播放')
                pass
            if y == 3:  # 下载
                if self.player.list_type == Y.LOCAL:
                    Ui_mesbox('已下载')
                pass
            if y == 4:
                if self.player.list_type == Y.LOCAL:
                    Ui_mesbox('本地音乐，无法添加至歌单')
                    pass
                pass
            if y == 5:  # 删除
                if self.player.player_index == x:
                    self.player.stop()
                item.tableWidget().removeRow(x)
                self.player.player_list.pop(x)
                Ui_mesbox('删除成功')
            return
        if name == 'gdsong_list':
            if y == 2:  # 播放
                if not self.play_song_gd(x):
                    self.mes = Ui_mesbox('无法播放')
                pass
            if y == 3:  # 下载
                if not self.handle.down_song(x):
                    self.mes = Ui_mesbox('无法下载')
                else:
                    self.mes = Ui_mesbox('下载成功')
                pass
            if y == 4:  # 移动
                p = self.cursor().pos()
                gl = fs.find_gd()
                gl.remove(self.gd_list.currentItem().text())
                self.pop = Ui_pop(gl, p.x(), p.y())
                self.pop.sendclickitem.connect(self.move_song)
                try:
                    self.player.player_list.remove(
                        '%s-%s' % (self.gdsong_list.item(x, 0).text(), self.gdsong_list.item(x, 1).text()))
                except:
                    pass
                pass
            if y == 5:  # 删除
                if self.player.isplaying == "%s/%s-%s.mp3" % (
                        gm.st.path_temp, self.gdsong_list.item(x, 0).text(),
                        self.gdsong_list.item(x, 1).text()):
                    self.player.stop()
                self.player.player_list.pop(x)
                l = fs.read_json(self.gd_list.currentItem().text(), True)
                l.pop(x)
                fs.write_json(self.gd_list.currentItem().text(), l, True)
                item.tableWidget().removeRow(x)

    # 搜索列表 添加
    def set_table_item(self, tableWidget: TableWidget, list, type1: str):  # 歌名 歌手 播放 下载 添加歌单 (删除)
        tableWidget.clear()
        if len(list) == 0:
            tableWidget.setRowCount(0)
            tableWidget.setColumnCount(0)
            return
        tableWidget.setRowCount(len(list))
        tableWidget.setColumnCount(6)
        if type1 == '歌单':
            tableWidget.setColumnWidth(0, 170)
            tableWidget.setColumnWidth(1, 70)
        else:
            tableWidget.setColumnWidth(0, 290)
            tableWidget.setColumnWidth(1, 180)
        tableWidget.setColumnWidth(2, 20)
        tableWidget.setColumnWidth(3, 20)
        tableWidget.setColumnWidth(4, 20)
        tableWidget.setColumnWidth(5, 20)
        c = 0
        for i in range(0, len(list)):
            if type(list[i]) is dict:
                tableWidget.setItem(i, 0, TableItem(list[i]['title']))
                tableWidget.setItem(i, 1, TableItem(list[i]['author']))
            else:
                tableWidget.setItem(i, 0, TableItem(list[i][0]))
                tableWidget.setItem(i, 1, TableItem(list[i][1]))
            tableWidget.setItem(i, 2, TableItem('播放'))
            c = 3
            for x in colume_name_list[type1]:
                tableWidget.setItem(i, c, TableItem(x))
                c += 1
                pass
            pass
        tableWidget.itemClicked.connect(self.tableitem_click)

    # 搜索
    def search_line(self):
        if self.stackedWidget.currentIndex() != 0:
            self.stackedWidget.setCurrentIndex(0)
        if self.type_seach.currentIndex() < 4:
            result = self.handle.reset(self.type_seach.currentIndex(), self.search.text())
            if result is True:
                self.set_table_item(self.search_list, self.handle.mes_list, '搜索')
            else:
                self.mes = Ui_mesbox(result)
        else:
            if self.type_seach.currentIndex() == 4:
                gm.judgeurl(self.search.text())
                self.mes = Ui_mesbox('下载完成')
            else:
                rr = self.handle2.jxsong(self.type_seach.currentIndex() - 5, self.search.text())
                if rr:
                    self.handle.mes_list.clear()
                    self.handle.mes_list += self.handle2.list
                    self.set_table_item(self.search_list, self.handle2.list, '搜索')
                else:
                    self.mes = Ui_mesbox(rr)

    # 展示播放列表
    def show_play_list(self):
        if self.stackedWidget.currentIndex() != 1:
            self.stackedWidget.setCurrentIndex(1)
        self.set_table_item(self.play_list, self.player.player_list, '播放')
        self.my_set.setCurrentIndex(1)

    # 添加至歌单
    def add_gd(self, gd_name, tableWidet: QTableWidget, index):
        try:
            l = fs.read_json(gd_name, True)
            d = {}
            m: dict = self.handle.mes_list[index]
            if 'http' in m[3]:
                m[3] = gm.requests.get(url=m[3], headers=gm.heard).text.encode('UTF-8').decode('unicode_escape')
            if tableWidet.objectName() == 'search_list':
                d = {
                    'title': m[0],
                    'author': m[1],
                    'url': m[2],
                    'lrc_content': m[3],
                    'pix': m[4]
                }
            if tableWidet.objectName() == 'play_list':
                d = {
                    'title': m['title'],
                    'author': m['author'],
                    'url': m['url'],
                    'lrc': m['lrc_content'],
                    'pix': m['pix']
                }
                fs.write_json(gd_name, d, True)
            l.append(d)
            fs.write_json(gd_name, l, True)
            self.mes = Ui_mesbox("添加成功")
        except Exception as e:
            self.mes = Ui_mesbox("添加失败")
            self.printt(e)

    # 定时更改歌词面板
    def update_lrc_map(self, mes):
        self.lrc_map.setHtml(mes)
        self.lrc_map.scrollToAnchor('this')

    # 改变播放按钮图片
    def changepix(self, type):
        if type > 0:  # 暂停
            self.playbutton.setIcon(QtGui.QIcon('resource/Play.png'))
        else:  # 播放
            self.playbutton.setIcon(QtGui.QIcon('resource/Pause.png'))

    # 改变播放模式槽函数
    def changemode(self, i: int):
        self.player.player_mode = i

    # 展示歌单
    def show_song_list(self):
        self.gdsong_list.clear()
        self.gd_list.clear()
        self.player.gd = fs.find_gd()
        self.gd_list.addItems(self.player.gd)
        self.gd_list.setCurrentRow(0)
        self.set_table_item(self.gdsong_list, fs.read_json(self.player.gd[0], True), '歌单')
        self.gd_list.addItem(QListWidgetItem(QtGui.QIcon('resource/add1.png'), '添加歌单'))
        self.gd_list.itemClicked.connect(self.operation_gd)
        self.my_set.setCurrentIndex(2)

    # 歌单右键菜单函数
    def receive(self, action: QAction):
        name = action.text()
        if name == '删除':
            fs.delete_file("%s/%s.json" % (gm.st.path_song, self.gd_list.currentItem().text()))
            self.gd_list.addItems(fs.find_gd())
            self.show_song_list()
        else:
            if name == '重命名':
                self.newgd = Inputbox('重命名歌单', '新歌单名')
                self.newgd.sendname.connect(self.rename_gd)
            else:
                if name == '清空':
                    self.gdsong_list.clear()
                    self.gdsong_list.setRowCount(0)
                    self.gdsong_list.setColumnCount(0)
                    fs.write_json(self.gd_list.currentItem().text(), [], True)
                else:
                    if name == '导入歌单':
                        self.newgd = Inputbox('导入歌单', '网易云、QQ歌单链接导入单个\n或用户cookie:__csrf、MUSIC_U、用户uid批量导入')
                        self.newgd.sendname.connect(self.import_gd)

    # 导入歌单
    def import_gd(self, link):
        if '__csrf' in link and 'MUSIC_U' in link and 'uid' in link:
            self.handle.wyy.login(link)
            self.w = Ui_List(self.handle.wyy.playlist)
            self.w.sendselect.connect(self.imp_many)
            return
        n = self.handle.hand_id(link)
        self.add_new_gd(n.replace('|', ''), self.handle.mes_list)
        self.printt(n + ' 歌单导入成功')

    # 批量导入歌单
    def imp_many(self, l: list):
        t = threading.Thread(target=self.f, args=(l,))
        t.setDaemon(True)
        t.start()

    def f(self, l: list):
        for x in l:
            self.printt('正在导入%s歌单，大概需要%d秒' % (x[0], x[2]))
            self.handle.hand_id('https://music.163.com/playlist?id=' + str(x[1]))
            self.add_new_gd(x[0].replace('|', ''), self.handle.mes_list)
            self.printt('%s歌单导入完毕' % x[0])

    # 重命名歌单
    def rename_gd(self, newname):
        fs.os.rename("%s/%s.json" % (gm.st.path_song, self.gd_list.currentItem().text()),
                     "%s/%s.json" % (gm.st.path_song, newname))
        self.gd_list.currentItem().setText(newname)

    # 歌单选择 以及 添加歌单
    def operation_gd(self, item: QListWidgetItem):
        t = item.text()
        if t != '添加歌单':
            self.set_table_item(self.gdsong_list, fs.read_json(t, True), '歌单')
        else:
            self.newgd = Inputbox('添加新歌单')
            self.newgd.sendname.connect(self.add_new_gd)

    # 添加新歌单
    def add_new_gd(self, n, content=None):
        if content is None:
            content = []
        self.gd_list.insertItem(self.gd_list.count() - 1, QListWidgetItem(n))
        fs.write_json(n, content, True)
        self.printt('新歌单%s添加成功' % n)

    # 显示桌面歌词
    def show_lrc_f(self):
        if self.player.toplrc.isHidden():
            self.player.toplrc.show()
            self.printt('开启桌面歌词')
        else:
            self.player.toplrc.hide()
            self.printt('关闭桌面歌词')

    # 状态栏更新
    def printt(self, text, time=5000):
        self.statusbar.showMessage(text, time)

    def mousePressEvent(self, event: QtGui.QMouseEvent):
        self.mouse_left = False
        if event.button() == QtCore.Qt.LeftButton:
            self.mouse_left = True
            self.last_point = event.globalPos()

    def mouseReleaseEvent(self, event: QtGui.QMouseEvent):
        if self.mouse_left:
            i = self.stackedWidget.currentIndex()
            cha = event.globalPos() - self.last_point
            if (cha.x() > 100 and abs(cha.y()) < 35) or (cha.x() < -100 and abs(cha.y()) < 35):
                if i == 0:
                    self.stackedWidget.setCurrentIndex(1)
                if i == 1:
                    self.stackedWidget.setCurrentIndex(0)
            if self.stackedWidget.currentIndex() == 0 and abs(cha.x()) < 35 and cha.y() > 100:
                if self.type_seach.currentIndex() < 4:
                    self.handle.hand_more()
                else:
                    self.handle2.handle_more()
                    self.handle.mes_list.clear()
                    self.handle.mes_list += self.handle2.list
                self.set_table_item(self.search_list, self.handle.mes_list, '搜索')

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        if self.pop is not None and not self.pop.isHidden():
            winsound.PlaySound("resource/mesbox.wav", 1)
            a0.ignore()
        else:
            if fs.os.path.exists(gm.st.path_json + '/play_list.json'):
                fs.delete_file(gm.st.path_json + '/play_list.json')
            if self.player.list_type == Y.SELF:
                fs.write_json('play_list', self.player.player_list)
        if gm.st.conf.getboolean('base', 'isclear'):
            fs.delete_path(gm.st.path_temp)
        else:
            for x in self.player.player_list:
                if x['type'] == 1:
                    x['type'] = 2
        if self.player.t is not None:
            self.player.t.cancel()
        self.player.toplrc.close()

    # 更换路径
    def setppath(self):
        dialog = QFileDialog()
        dirname = dialog.getExistingDirectory()
        self.pathedit.setText(dirname + '/Yuye')
        fs.move_file(gm.st.conf.get('path_section', 'path_exe'), dirname)
        gm.st.set_confi('path_section', 'path_exe', dirname + '/Yuye')
        gm.st.path_exe = gm.st.conf.get('path_section', 'path_exe')
        if fs.os.path.exists(gm.st.conf.get('path_section', 'path')):
            gm.st.path = gm.st.conf.get('path_section', 'path')
        else:
            gm.st.path = gm.st.path_exe + '/music'
        gm.st.path_txt = gm.st.path_exe + '/日志.txt'
        gm.st.path_temp = gm.st.path_exe + '/temp'
        gm.st.path_json = gm.st.path_exe + '/json'
        gm.st.path_song = gm.st.path_json + '/song_list'

    # 更换下载路径
    def setdownppath(self):
        dirname = QFileDialog().getExistingDirectory()
        self.downpathedit.setText(dirname)
        gm.st.set_confi('path_section', 'path', dirname)
        gm.st.path = dirname

    # 改变透明度
    def updatetmd(self, value):
        self.printt('桌面歌词透明度:%d' % value)
        value = str(int(value / 100 * 255))
        fc1 = self.player.toplrc.fc1.split(',')
        fc2 = self.player.toplrc.fc2.split(',')
        fc1[3] = value
        fc2[3] = value
        self.player.toplrc.fc1 = ','.join(fc1)
        self.player.toplrc.fc2 = ','.join(fc2)
        self.player.toplrc.label.setStyleSheet('color:rgb(%s)' % self.player.toplrc.fc1)
        self.player.toplrc.label_2.setStyleSheet('color:rgb(%s)' % self.player.toplrc.fc2)
        gm.st.set_confi('lrc_section', 'fc1', self.player.toplrc.fc1)
        gm.st.set_confi('lrc_section', 'fc2', self.player.toplrc.fc2)

    # 改变背景图片
    def updatepix(self):
        dig = QFileDialog()
        dirname = dig.getOpenFileName(filter='*.jpg;;*.png;;*JPEG;;All Files(*)')
        fs.shutil.copyfile(dirname[0], 'resource/pix.png')
        setPix(self, "resource/pix.png", self.bjpix.isChecked())
        self.pix_show.setPixmap(QtGui.QPixmap("resource/pix.png"))
        gm.st.set_confi('base', 'isauto', str(self.bjpix.isChecked()))

    # 改变背景图片是否自动填充
    def updatepixisauto(self):
        setPix(self, "resource/pix.png", self.bjpix.isChecked())
        gm.st.set_confi('base', 'isauto', str(self.bjpix.isChecked()))

    # 设置当前播放细节
    def setdetail(self, l: list):
        self.show_detail.setText('%s——%s' % (l[0][0], l[0][1]))

    # 设置字体颜色
    def set_fontcolor(self):
        c = QColorDialog.getColor(QtGui.QColor(FC))
        gm.st.set_confi('base', 'font_color', c.name())
        self.font_color.setStyleSheet("background-color:%s" % c.name())
        self.printt('已更换字体颜色，请重新启动')

    # 歌词面板字体颜色fc1
    def set_fc1(self):
        c = QColorDialog.getColor(QtGui.QColor(gm.st.conf.get('base', 'fc1')))
        gm.st.set_confi('base', 'fc1', c.name())
        self.fc1.setStyleSheet("background-color:%s" % c.name())
        self.printt('更改歌词面板字体颜色:%s,%s' % (c.name(), gm.st.conf.get('base', 'fc2')))

    # 歌词面板字体颜色fc1
    def set_fc2(self):
        c = QColorDialog.getColor(QtGui.QColor(gm.st.conf.get('base', 'fc2')))
        gm.st.set_confi('base', 'fc2', c.name())
        self.fc2.setStyleSheet("background-color:%s" % c.name())
        self.printt('更改歌词面板字体颜色:%s,%s' % (gm.st.conf.get('base', 'fc1'), c.name()))

    # 设置每次关闭是否清除缓存
    def setisclear(self, i):
        if i == 2:
            gm.st.set_confi('base', 'isclear', 'True')
        elif i == 0:
            gm.st.set_confi('base', 'isclear', 'False')

    # 保存过滤器
    def savefilter1(self):
        if re.match(re.compile(r'\.(.*)'), self.addfilter.text()) is None:
            Ui_mesbox('格式错误，正确格式:.mp3')
            return
        self.addfilter.hide()
        self.filterBox.addItem(self.addfilter.text())
        gm.st.filters.append(self.addfilter.text())
        gm.st.set_confi('base','filters', ','.join(gm.st.filters))

    def savefilter2(self):
        gm.st.filters.remove(self.filterBox.currentText())
        self.filterBox.removeItem(self.filterBox.currentIndex())
        gm.st.set_confi('base', 'filters', ','.join(gm.st.filters))

    # 设置槽函数
    def setslots(self):
        self.fc1.clicked.connect(self.set_fc1)
        self.fc2.clicked.connect(self.set_fc2)
        self.search.returnPressed.connect(self.search_line)
        self.volume.valueChanged.connect(self.set_volume)
        self.show_player_list.clicked.connect(self.show_play_list)
        self.player.sendlrc.connect(self.update_lrc_map)
        self.player.sendcur.connect(self.setdetail)
        self.player.changepix.connect(self.changepix)
        self.local.clicked.connect(self.show_local)
        self.playbutton.clicked.connect(self.player.changestate)
        self.search_local.clicked.connect(self.search_select_local)
        self.progressBar.userset_value.connect(self.player.change_position)
        self.mode.currentIndexChanged.connect(self.changemode)
        self.set.clicked.connect(lambda: self.my_set.setCurrentIndex(3))
        self.my_list.clicked.connect(self.show_song_list)
        self.player.changepb.connect(self.changepb)
        self.gd_list.popMenu.triggered.connect(self.receive)
        self.next.clicked.connect(lambda: self.player.change_player_index(1))
        self.previous.clicked.connect(lambda: self.player.change_player_index(-1))
        self.show_lrc.clicked.connect(self.show_lrc_f)
        self.settmd.valueChanged.connect(self.updatetmd)
        self.setpath.clicked.connect(self.setppath)
        self.setbj.clicked.connect(self.updatepix)
        self.font_color.clicked.connect(self.set_fontcolor)
        self.bjpix.stateChanged.connect(self.updatepixisauto)
        self.isclear.stateChanged.connect(self.setisclear)
        self.clear_temp.clicked.connect(lambda: fs.delete_path(gm.st.path_temp))
        self.setdownpath.clicked.connect(self.setdownppath)
        self.addf.clicked.connect(lambda :self.addfilter.show())
        self.addfilter.returnPressed.connect(self.savefilter1)
        self.subf.clicked.connect(self.savefilter2)
        self.clear_pl.clicked.connect(self.clear_playlist)
